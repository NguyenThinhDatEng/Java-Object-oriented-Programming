							Abstraction
- Là 1 tính chất, chỉ tập trung vào những tính năng của object và ẩn đi những thông tin không cần thiết
=> quan tâm hơn vào những tính năng thay vi cách nó thực hiện
Eg:
   Khi rút ATM -> không quan tâm cách máy hoạt động, thành phần trong ATM -> chỉ quan tâm tính năng rút tiền
=> các thông tin không cần thiết bị ẩn đi
   khi sử dụng 1 object -> chỉ quan tâm đến method cần thiết, chỉ cần biết method đó được dùng để làm gì
			-> không quan tâm đến sourcecode, các method khác
- Sử dụng abstract class (lớp trừu tượng) và interface

1. Abstraction class
- Là lớp được khai báo với keyword: abstract
	a, Nếu 1 class là abstraction -> không thể initilaze object của class đó
					-> chỉ initilaze object của subClass
	Eg:
		abstract class Animal{
		}
		class Cat extends Animal{
		}

		public class Entry{
			public static void main(...){
				Animal a = new Cat();
			}
		}
	b, abstraction class có thể có abstraction methods -> chỉ có phần declare, không có phần thân
		For example:
		abstract class Animal{
			public abstract void makeSound():

		}
	c, Nếu subClass kế thừa abstraction class => subClass phải ghi đè all các abstraction method
- Mục đích: 
+ Làm lớp cha cho các class có cùng bản chất
+ Việc sử dụng abtract method, abstract class giúp ẩn đi được cách cài đặt của phương thức
Tuy nhiên vẫn có thể declare properties, methods có phần thân nên abstraction class -> không hoàn toàn
=> Để đạt được tính trừu tượng hoàn toàn cần sd tới interface
							Interface
- Dùng để lưu trữ abstraction mehthods và các const.
- Đặc điểm
	1. Giống với abstraction class => không thể khởi tạo object của interface => chỉ khởi tạo được đối tượng của subClass
	2. all of methods in Interface đều được complier hiểu là abstraction method và all of variables in Interface đề được
	   complier hiểu là các const.
	Eg:
	interface abc{
		int N = 4;
		void move();
	}
	COMPLIER--------->
	interface abc{
		public static final int N = 4;
		public abstract void move();
	}
	
	3. 1 class có thể kế thừa nhiều interface.
	   Java -> simple -> Not đa thừa kế -> interface chỉ chứa method rỗng -> Java cho phép kế thừa nhiều interface
	   syntax:
		class <subClass_name> implements <interface_name01>,<interface_name02>{

		}

=> Trong thực tế, sử dụng rất nhiều interface, mỗi a class thường tạo 1 interface riêng để thể hiện tính năng của lớp đó
và giao tiếp với đối tượng thông qua interface.
Eg:
	Custumer class ~ interface ICustumer
	Employee class ~ interface IEmployee

explanation /ˌekspləˈneɪʃn/ (n): giải thích
diagram /ˈdaɪəɡræm/: sơ đồ
wage /weɪdʒ/: tiền công