TÍNH ĐÓNG GÓI

- Là kỹ thuật giúp che giấu những thông tin bên trong đối tượng
=> hạn chế các lỗi khi phát triển chương trình
For example:
class Student{
	public String name;
	public int age;
	public double gpa;
}
=> các thuộc tính này có thể truy xuất trực tiếp từ các nơi khác
=>> 	NÊN HẠN CHẾ tối đa các biến PUBLIC vì nó vi phạm tính đóng gói trong OOP
	Để đảm bảo Encapsulation cho "Student" class
		+ Phạm vi truy cập của attribute là private
		+ Truy suất tới các thuộc tính này thông qua các public method (setter, getter)
For example:
class Student{
	private String name;

	public String getname(){
		return name;
	}
	
	public void setName(String name)
	{
		this.name = name;
	}
}

=> Thông tin của đối tượng đã được ẩn đi. Chỉ có thể giao tiếp với đói tượng thông qua các method
(Khi gặp 1 người lạ, không thể biết các attribute của người này (sđt, sở thích, ...), kể cả khi hỏi chưa chắc đã nhận được câu trả
lời đúng sự thật - method không trả về giá trị thực thuộc tính mà trả về 1 giá trị khác)

LỢI ÍCH (4)
1. Hạn chế được các truy xuất không hợp lệ tới các property of object
2. Giúp cho trạng thái của các đối tượng luôn đúng
For example:
public void setGpa(double gpa){
	if(gpa >= 0 && gpa <= 4) {
		this.gpa = gpa;
	}
	else {
		System.out.println("gpa is invalid");
	}
}
=> gpa luôn > 0 và <= 4 (do muốn thay đổi gpa phải thông qua setGpa())

3. Ẩn đi những thông tin không cần thiết về đối tượng
4. Cho phép bạn thay đổi cấu trúc bên trong class mà không ảnh hưởng đến các class khác
For example:
Code 01:
class Student{
	private String firstName;
	private String lastName;
	public Student() {
		...
	}
	public String getFullName(){
		return firstName + lastName;
	}
}
Lúc sau muốn gộp 2 thuộc tính firstName và lastName thành fullName thì
Code 02:
class Student{
	private String fullName;
	public Student() {
		...
	}
	public String getFullName(){
		return fullName;
	}
}
=> cấu trúc bị thay đổi nhưng các object sử dụng class này vẫn không cần phải thay đổi do các đối tượng này chỉ quan tâm tới 
getfullName() method (Nếu không có method này thì phải sửa tất cả những chô sử dụng thuộc tính firstName và lastName)

THỰC TẾ:
Nên sử dụng Parameterized Constructor   để khởi tạo cho giá trị của attribute
	    setter 			để thay đổi giá trị cho các attribute