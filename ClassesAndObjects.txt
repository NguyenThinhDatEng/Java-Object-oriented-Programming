Lập trình hướng đối tượng -> dễ phát triển và bảo trì hơn
+ Chia chương trình thành các đối tượng
	+ Đối tượng bao gồm: thuộc tính (dữ liệu) và hành vi riêng (phương thức)
For example:
Class Student
{
	String name;
	int age;
	
	public void display() {				// giới thiệu bản thân
		System.out.println("Name: " + name);
		System.out.println("Age: " + age);
	}
}

public class Entry {
	public static void main(String[] args) {
		Student student1 = new Student();
		student1.name = "Thuan";
		student1.age = 20;
		student1.display();
	}
}

Class -> nơi định nghĩa thông tin về các đối tượng (Student)
	-> là một kiểu dữ liệu mà biến của kiểu dữ liệu được coi như một đối tượng
Object -> là một thể hiện của class (student1)
	-> là một biến
attribute -> là các đặc điểm của đối tượng (name; age)
method -> là hành vi (hành động) của đối tượng (display())


class Student {
	String name;

	private void display() {
		System.out.println("Name" : + name);
	}
}
private -> phạm vi truy cập hạn chế nhất
	  -> properties and methods chỉ được truy xuất từ bên trong lớp đó
default (Khi khai báo a property or a method mà k khai báo phạm vi truy cập => default)
	-> Các varialbe and method chỉ được truy xuất cùng 1 package
=> import <name_package>.<name_class>
protect -> tương tự default, ít hạn chế hơn ở property and method có thể truy xuất từ một lớp con của package khác
(tính kế thừa)
public -> các properties and methods có thể được truy xuất từ bất cứ đâu

Constructor (phương thức khởi tạo)
- phương thức đặc biệt => tự động được gọi khi khởi tạo 1 đối tượng
- Phương thức thông thường: dùng toán tử . để gọi tới
- 1. Không được định nghĩa kiểu trả về
- 2. tên trùng với tên lớp
class Student {
	String name;
	int age;
}
=> class khoong được khai báo constructor => chương trình tự động tạo 1 constructor mặc định
class Student {
	String name;
	int age;
	public Student(){
	}
}
NOTE: không thể dùng private key để khai báo constructor
***constructor có tham số
class Student {
	String name;
	int age;
	public Student(String name, int age){
		this.name = name;
		this.age = age;
	}
}
NOTE: nếu tên tham số đầu vào trùng với tên thuộc tính của class => dùng this và toán tử . để truy xuất tới thuộc tính của class
(như trên)
Class Customer {
	String name;
	public Customer(){
	}
	public Customer(String name) {
		this.name = name;
	}
}
NOTE:   1 class có thể có nhiều constructor
	trong phương thức main() phải gọi constructor tương ứng với tham số truyền vào

SƠ ĐỒ LỚP
1 Ký hiệu class có 3 phần:
Class name
attributes (danh sách các thuộc tính)
operations (các phương thức)
						Tên lớp
					- Thuộc tính 01
					- Thuộc tính 02
					...
					________________
					+ phương thức 01()
					+ phương thức 02()
					...
Trong sơ đồ trên có thể mô tả phạm vi truy cập bằng cách đặt các ký tự -, ~, #, + vào trước các properties and methods
* Ký tự '-' private
* Ký tự '~' default
* Ký tự '#" protected
* Ký tự '+' public


